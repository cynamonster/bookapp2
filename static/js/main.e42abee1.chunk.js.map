{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e42abee1.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n      addBook(name: $name, genre: $genre, authorId: $authorId){\n          name\n          id\n      }\n  }\n`\n\nconst getBookQuery = gql`\n  query($id: ID){\n    book(id: $id){\n      id\n      name\n      genre\n      author{\n        id\n        name\n        age\n        books{\n          name\n          id\n        }\n      }\n    }\n  }\n`\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../queries/queries';\n\n\nclass BookDetails extends Component {\n    displayBookDetails() {\n        const { book } = this.props.data;\n        if(book){\n            return(\n                <div>\n                    <h2>{ book.name }</h2>\n                    <p>{ book.genre }</p>\n                    <p>{ book.author.name }</p>\n                    <p>All books by this author:</p>\n                    <ul className=\"other-books\">\n                        {\n                            book.author.books.map(item => {\n                                return <li key={ item.id }>{ item.name }</li>\n                            })\n                        }\n                    </ul>\n                </div>\n            );\n        } else {\n            return (\n                <div>No book selected..</div>\n            );\n        }\n    }\n    render() {\n        return (\n            <div id=\"book-details\">\n                { this.displayBookDetails() }\n            </div>\n        );\n    }\n  }\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n      return {\n        variables: {\n          id: props.bookId\n        }\n      }\n    }\n  })(BookDetails);\n  ","import React, { Component } from 'react';\nimport { getBooksQuery } from '../queries/queries';\nimport { graphql } from 'react-apollo'\n\n// components\nimport BookDetails from './BookDetails';\n\nclass BookList extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      selected: null\n    }\n  }\n  displayBooks(){\n    var data = this.props.data;\n    if(data.loading){\n      return( <div>Loading books...</div> );\n    } else {\n      return data.books.map(book => {\n        return(\n          <li key={ book.id } onClick={ (e) => { this.setState({ selected: book.id })}}>{ book.name }</li>\n        );\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <ul id=\"book-list\">\n          { this.displayBooks() }\n        </ul>\n        <BookDetails bookId={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from 'react';\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from '../queries/queries';\nimport { graphql, compose } from 'react-apollo'\n\nclass AddBook extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        name: '',\n        genre: '',\n        authorId: ''\n      };\n    }\n    displayAuthors(){\n      var data = this.props.getAuthorsQuery;\n      if(data.loading){\n        return (<option disabled>Loading Authors..</option> );\n      } else {\n        return data.authors.map(author => {\n          return( <option key={ author.id } value={ author.id }>{ author.name }</option> );\n        })\n      }\n    }\n    submitForm(e){\n      e.preventDefault();\n      this.props.addBookMutation({\n        variables: {\n          name: this.state.name,\n          genre: this.state.genre,\n          authorId: this.state.authorId\n        },\n        refetchQueries: [{ query: getBooksQuery }]\n      })\n    }\n    render() {\n      return (\n        <form id=\"add-book\" onSubmit={ this.submitForm.bind(this) }>\n\n            <div className=\"field\">\n                <label>Book name:</label>\n                <input type=\"text\" onChange={ (e) => this.setState({ name: e.target.value })} />\n            </div>\n\n            <div className=\"field\">\n                <label>Genre:</label>\n                <input type=\"text\" onChange={ (e) => this.setState({ genre: e.target.value })} />\n            </div>\n\n            <div className=\"field\">\n                <label>Author:</label>\n                <select onChange={ (e) => this.setState({ authorId: e.target.value })}>\n                    <option>Select author</option>\n                    { this.displayAuthors() }\n                </select>\n            </div>\n\n            <button>+</button>\n    \n        </form>\n      );\n    }\n  }\n  \n  export default compose(\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\"}),\n    graphql(addBookMutation, { name: \"addBookMutation\" })  \n  )(AddBook);\n  ","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// components\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\n// Apollo client setup \nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>The Cynamonster sends his regards.</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}